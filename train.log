['features.0.weight', 'features.0.bias', 'features.1.weight', 'features.1.bias', 'features.1.running_mean', 'features.1.running_var', 'features.1.num_batches_tracked', 'features.4.weight', 'features.4.bias', 'features.5.weight', 'features.5.bias', 'features.5.running_mean', 'features.5.running_var', 'features.5.num_batches_tracked', 'features.8.weight', 'features.8.bias', 'features.9.weight', 'features.9.bias', 'features.9.running_mean', 'features.9.running_var', 'features.9.num_batches_tracked', 'features.11.weight', 'features.11.bias', 'features.12.weight', 'features.12.bias', 'features.12.running_mean', 'features.12.running_var', 'features.12.num_batches_tracked', 'classifier.weight', 'classifier.bias']
Files already downloaded and verified
/data/bowen/pytorch-AE/param_dataset.py:7: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  p_data = torch.load(param_path)
In epoch 0/10000, mean loss is:11534585036800.0
/data/bowen/miniconda3/envs/tbw/lib/python3.8/site-packages/torch/nn/parallel/parallel_apply.py:79: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.
  with torch.cuda.device(device), torch.cuda.stream(stream), autocast(enabled=autocast_enabled):
/data/bowen/miniconda3/envs/tbw/lib/python3.8/site-packages/torch/nn/modules/instancenorm.py:88: UserWarning: input's size at dim=1 does not match num_features. You can silence this warning by not passing in num_features, which is not used because affine=False
  warnings.warn(f"input's size at dim={feature_dim} does not match num_features. "
tensor([ 0.1597,  0.3416,  0.3101,  ...,  0.4199,  0.1543, -0.1083],
       device='cuda:0')
Now Process 0, Acc:10.0, Test Loss:nan
tensor([ 0.1597,  0.3416,  0.3101,  ...,  0.4199,  0.1543, -0.1084],
       device='cuda:0')
/data/bowen/miniconda3/envs/tbw/lib/python3.8/site-packages/torch/nn/_reduction.py:42: UserWarning: size_average and reduce args will be deprecated, please use reduction='sum' instead.
  warnings.warn(warning.format(ret))
Now Process 1, Acc:10.0, Test Loss:nan
tensor([ 0.1597,  0.3415,  0.3100,  ...,  0.4201,  0.1543, -0.1082],
       device='cuda:0')
Now Process 2, Acc:10.0, Test Loss:nan
tensor([ 0.1597,  0.3416,  0.3101,  ...,  0.4195,  0.1540, -0.1081],
       device='cuda:0')
Now Process 3, Acc:10.0, Test Loss:nan
tensor([ 0.1597,  0.3417,  0.3102,  ...,  0.4191,  0.1536, -0.1075],
       device='cuda:0')
Now Process 4, Acc:10.0, Test Loss:nan
In epoch 1/10000, mean loss is:11521724863829.334
In epoch 2/10000, mean loss is:11513796493312.0
In epoch 3/10000, mean loss is:11492704736597.334
